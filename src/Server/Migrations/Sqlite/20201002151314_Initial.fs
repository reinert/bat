// <auto-generated />
namespace Migrations.Sqlite

open Repository
open System
open System.Collections.Generic
open Microsoft.EntityFrameworkCore
open Microsoft.EntityFrameworkCore.Infrastructure
open Microsoft.EntityFrameworkCore.Metadata
open Microsoft.EntityFrameworkCore.Migrations
open Microsoft.EntityFrameworkCore.Migrations.Operations
open Microsoft.EntityFrameworkCore.Migrations.Operations.Builders
open Microsoft.EntityFrameworkCore.Storage.ValueConversion


type private EventsTable = {
    Id: OperationBuilder<AddColumnOperation>
    Name: OperationBuilder<AddColumnOperation>
}

type private ProvidersTable = {
    Id: OperationBuilder<AddColumnOperation>
    Name: OperationBuilder<AddColumnOperation>
}

type private ExchangeTransactionsTable = {
    Id: OperationBuilder<AddColumnOperation>
    Date: OperationBuilder<AddColumnOperation>
    FromCurrency: OperationBuilder<AddColumnOperation>
    ToCurrency: OperationBuilder<AddColumnOperation>
    Price: OperationBuilder<AddColumnOperation>
    Quantity: OperationBuilder<AddColumnOperation>
    ProviderId: OperationBuilder<AddColumnOperation>
}

type private ExchangeTransactionEventsTable = {
    TransactionId: OperationBuilder<AddColumnOperation>
    EventId: OperationBuilder<AddColumnOperation>
}

[<DbContext(typeof<SqliteContext>)>]
[<Migration("20201002151314_Initial")>]
type Initial() =
    inherit Migration()

    override this.Up(migrationBuilder:MigrationBuilder) =
        migrationBuilder.CreateTable(
            name = "Events"
            ,columns = (fun table -> 
            {
                Id = table.Column<int>(nullable = false)
                    .Annotation("Sqlite:Autoincrement", true)
                Name = table.Column<string>(nullable = true)
            })
            ,constraints =
                (fun table -> 
                    table.PrimaryKey("PK_Events", (fun x -> (x.Id) :> obj)) |> ignore
                ) 
            ) |> ignore

        migrationBuilder.CreateTable(
            name = "Providers"
            ,columns = (fun table -> 
            {
                Id = table.Column<int>(nullable = false)
                    .Annotation("Sqlite:Autoincrement", true)
                Name = table.Column<string>(nullable = true)
            })
            ,constraints =
                (fun table -> 
                    table.PrimaryKey("PK_Providers", (fun x -> (x.Id) :> obj)) |> ignore
                ) 
            ) |> ignore

        migrationBuilder.CreateTable(
            name = "ExchangeTransactions"
            ,columns = (fun table -> 
            {
                Id = table.Column<int>(nullable = false)
                    .Annotation("Sqlite:Autoincrement", true)
                Date = table.Column<DateTime>(nullable = false)
                FromCurrency = table.Column<int>(nullable = false)
                ToCurrency = table.Column<int>(nullable = false)
                Price = table.Column<decimal>(nullable = false)
                Quantity = table.Column<int>(nullable = false)
                ProviderId = table.Column<int>(nullable = true)
            })
            ,constraints =
                (fun table -> 
                    table.PrimaryKey("PK_ExchangeTransactions", (fun x -> (x.Id) :> obj)) |> ignore
                    table.ForeignKey(
                        name = "FK_ExchangeTransactions_Providers_ProviderId",
                        column = (fun x -> (x.ProviderId) :> obj), principalTable = "Providers", principalColumn = "Id", onDelete = ReferentialAction.Restrict) |> ignore

                ) 
            ) |> ignore

        migrationBuilder.CreateTable(
            name = "ExchangeTransactionEvents"
            ,columns = (fun table -> 
            {
                TransactionId = table.Column<int>(nullable = false)
                EventId = table.Column<int>(nullable = false)
            })
            ,constraints =
                (fun table -> 
                    table.PrimaryKey("PK_ExchangeTransactionEvents", (fun x -> (x.TransactionId, x.EventId) :> obj)) |> ignore
                    table.ForeignKey(
                        name = "FK_ExchangeTransactionEvents_Events_EventId",
                        column = (fun x -> (x.EventId) :> obj), principalTable = "Events", principalColumn = "Id", onDelete = ReferentialAction.Cascade) |> ignore

                    table.ForeignKey(
                        name = "FK_ExchangeTransactionEvents_ExchangeTransactions_TransactionId",
                        column = (fun x -> (x.TransactionId) :> obj), principalTable = "ExchangeTransactions", principalColumn = "Id", onDelete = ReferentialAction.Cascade) |> ignore

                ) 
            ) |> ignore

        migrationBuilder.CreateIndex(
            name = "IX_ExchangeTransactionEvents_EventId"
            , table = "ExchangeTransactionEvents", column = "EventId") |> ignore

        migrationBuilder.CreateIndex(
            name = "IX_ExchangeTransactions_ProviderId"
            , table = "ExchangeTransactions", column = "ProviderId") |> ignore


    override this.Down(migrationBuilder:MigrationBuilder) =
        migrationBuilder.DropTable(
            name = "ExchangeTransactionEvents"
            ) |> ignore

        migrationBuilder.DropTable(
            name = "Events"
            ) |> ignore

        migrationBuilder.DropTable(
            name = "ExchangeTransactions"
            ) |> ignore

        migrationBuilder.DropTable(
            name = "Providers"
            ) |> ignore


    override this.BuildTargetModel(modelBuilder: ModelBuilder) =
        modelBuilder.HasAnnotation("ProductVersion", "3.1.8")
             |> ignore

        modelBuilder.Entity("Shared.Event", (fun b ->

            b.Property<int>("Id")
                .ValueGeneratedOnAdd()
                .HasColumnType("INTEGER") |> ignore
            b.Property<string>("Name")
                .HasColumnType("TEXT") |> ignore

            b.HasKey("Id") |> ignore

            b.ToTable("Events") |> ignore

        )) |> ignore

        modelBuilder.Entity("Shared.ExchangeTransaction", (fun b ->

            b.Property<int>("Id")
                .ValueGeneratedOnAdd()
                .HasColumnType("INTEGER") |> ignore
            b.Property<DateTime>("Date")
                .IsRequired()
                .HasColumnType("TEXT") |> ignore
            b.Property<int>("FromCurrency")
                .IsRequired()
                .HasColumnType("INTEGER") |> ignore
            b.Property<decimal>("Price")
                .IsRequired()
                .HasColumnType("TEXT") |> ignore
            b.Property<Nullable<int>>("ProviderId")
                .HasColumnType("INTEGER") |> ignore
            b.Property<int>("Quantity")
                .IsRequired()
                .HasColumnType("INTEGER") |> ignore
            b.Property<int>("ToCurrency")
                .IsRequired()
                .HasColumnType("INTEGER") |> ignore

            b.HasKey("Id") |> ignore


            b.HasIndex("ProviderId") |> ignore

            b.ToTable("ExchangeTransactions") |> ignore

        )) |> ignore

        modelBuilder.Entity("Shared.ExchangeTransactionEvent", (fun b ->

            b.Property<int>("TransactionId")
                .HasColumnType("INTEGER") |> ignore
            b.Property<int>("EventId")
                .HasColumnType("INTEGER") |> ignore

            b.HasKey("TransactionId", "EventId") |> ignore


            b.HasIndex("EventId") |> ignore

            b.ToTable("ExchangeTransactionEvents") |> ignore

        )) |> ignore

        modelBuilder.Entity("Shared.Provider", (fun b ->

            b.Property<int>("Id")
                .ValueGeneratedOnAdd()
                .HasColumnType("INTEGER") |> ignore
            b.Property<string>("Name")
                .HasColumnType("TEXT") |> ignore

            b.HasKey("Id") |> ignore

            b.ToTable("Providers") |> ignore

        )) |> ignore

        modelBuilder.Entity("Shared.ExchangeTransaction", (fun b ->
            b.HasOne("Shared.Provider","Provider")
                .WithMany()
                .HasForeignKey("ProviderId") |> ignore
        )) |> ignore

        modelBuilder.Entity("Shared.ExchangeTransactionEvent", (fun b ->
            b.HasOne("Shared.Event","Event")
                .WithMany()
                .HasForeignKey("EventId")
                .OnDelete(DeleteBehavior.Cascade)
                .IsRequired() |> ignore
            b.HasOne("Shared.ExchangeTransaction","Transaction")
                .WithMany()
                .HasForeignKey("TransactionId")
                .OnDelete(DeleteBehavior.Cascade)
                .IsRequired() |> ignore
        )) |> ignore

