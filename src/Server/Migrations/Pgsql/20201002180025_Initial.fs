// <auto-generated />
namespace Migrations.Pgsql

open Repository
open System
open System.Collections.Generic
open Microsoft.EntityFrameworkCore
open Microsoft.EntityFrameworkCore.Infrastructure
open Microsoft.EntityFrameworkCore.Metadata
open Microsoft.EntityFrameworkCore.Migrations
open Microsoft.EntityFrameworkCore.Migrations.Operations
open Microsoft.EntityFrameworkCore.Migrations.Operations.Builders
open Microsoft.EntityFrameworkCore.Storage.ValueConversion
open Npgsql.EntityFrameworkCore.PostgreSQL.Metadata


type private eventsTable = {
    id: OperationBuilder<AddColumnOperation>
    name: OperationBuilder<AddColumnOperation>
}

type private providersTable = {
    id: OperationBuilder<AddColumnOperation>
    name: OperationBuilder<AddColumnOperation>
}

type private exchange_transactionsTable = {
    id: OperationBuilder<AddColumnOperation>
    date: OperationBuilder<AddColumnOperation>
    from_currency: OperationBuilder<AddColumnOperation>
    to_currency: OperationBuilder<AddColumnOperation>
    price: OperationBuilder<AddColumnOperation>
    quantity: OperationBuilder<AddColumnOperation>
    provider_id: OperationBuilder<AddColumnOperation>
}

type private exchange_transaction_eventsTable = {
    transaction_id: OperationBuilder<AddColumnOperation>
    event_id: OperationBuilder<AddColumnOperation>
}

[<DbContext(typeof<PgsqlContext>)>]
[<Migration("20201002180025_Initial")>]
type Initial() =
    inherit Migration()

    override this.Up(migrationBuilder:MigrationBuilder) =
        migrationBuilder.CreateTable(
            name = "events"
            ,columns = (fun table -> 
            {
                id = table.Column<int>(nullable = false)
                    .Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                name = table.Column<string>(nullable = true)
            })
            ,constraints =
                (fun table -> 
                    table.PrimaryKey("pk_events", (fun x -> (x.id) :> obj)) |> ignore
                ) 
            ) |> ignore

        migrationBuilder.CreateTable(
            name = "providers"
            ,columns = (fun table -> 
            {
                id = table.Column<int>(nullable = false)
                    .Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                name = table.Column<string>(nullable = true)
            })
            ,constraints =
                (fun table -> 
                    table.PrimaryKey("pk_providers", (fun x -> (x.id) :> obj)) |> ignore
                ) 
            ) |> ignore

        migrationBuilder.CreateTable(
            name = "exchange_transactions"
            ,columns = (fun table -> 
            {
                id = table.Column<int>(nullable = false)
                    .Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                date = table.Column<DateTime>(nullable = false)
                from_currency = table.Column<int>(nullable = false)
                to_currency = table.Column<int>(nullable = false)
                price = table.Column<decimal>(nullable = false)
                quantity = table.Column<int>(nullable = false)
                provider_id = table.Column<int>(nullable = true)
            })
            ,constraints =
                (fun table -> 
                    table.PrimaryKey("pk_exchange_transactions", (fun x -> (x.id) :> obj)) |> ignore
                    table.ForeignKey(
                        name = "fk_exchange_transactions_providers_provider_id",
                        column = (fun x -> (x.provider_id) :> obj), principalTable = "providers", principalColumn = "id", onDelete = ReferentialAction.Restrict) |> ignore

                ) 
            ) |> ignore

        migrationBuilder.CreateTable(
            name = "exchange_transaction_events"
            ,columns = (fun table -> 
            {
                transaction_id = table.Column<int>(nullable = false)
                event_id = table.Column<int>(nullable = false)
            })
            ,constraints =
                (fun table -> 
                    table.PrimaryKey("pk_exchange_transaction_events", (fun x -> (x.transaction_id, x.event_id) :> obj)) |> ignore
                    table.ForeignKey(
                        name = "fk_exchange_transaction_events_events_event_id",
                        column = (fun x -> (x.event_id) :> obj), principalTable = "events", principalColumn = "id", onDelete = ReferentialAction.Cascade) |> ignore

                    table.ForeignKey(
                        name = "fk_exchange_transaction_events_exchange_transactions_transacti",
                        column = (fun x -> (x.transaction_id) :> obj), principalTable = "exchange_transactions", principalColumn = "id", onDelete = ReferentialAction.Cascade) |> ignore

                ) 
            ) |> ignore

        migrationBuilder.CreateIndex(
            name = "ix_exchange_transaction_events_event_id"
            , table = "exchange_transaction_events", column = "event_id") |> ignore

        migrationBuilder.CreateIndex(
            name = "ix_exchange_transactions_provider_id"
            , table = "exchange_transactions", column = "provider_id") |> ignore


    override this.Down(migrationBuilder:MigrationBuilder) =
        migrationBuilder.DropTable(
            name = "exchange_transaction_events"
            ) |> ignore

        migrationBuilder.DropTable(
            name = "events"
            ) |> ignore

        migrationBuilder.DropTable(
            name = "exchange_transactions"
            ) |> ignore

        migrationBuilder.DropTable(
            name = "providers"
            ) |> ignore


    override this.BuildTargetModel(modelBuilder: ModelBuilder) =
        modelBuilder.HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
            .HasAnnotation("ProductVersion", "3.1.8")
            .HasAnnotation("Relational:MaxIdentifierLength", 63)
             |> ignore

        modelBuilder.Entity("Shared.Event", (fun b ->

            b.Property<int>("Id")
                .ValueGeneratedOnAdd()
                .HasColumnName("id")
                .HasColumnType("integer").HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                 |> ignore
            b.Property<string>("Name")
                .HasColumnName("name")
                .HasColumnType("text") |> ignore

            b.HasKey("Id")
                .HasName("pk_events") |> ignore

            b.ToTable("events") |> ignore

        )) |> ignore

        modelBuilder.Entity("Shared.ExchangeTransaction", (fun b ->

            b.Property<int>("Id")
                .ValueGeneratedOnAdd()
                .HasColumnName("id")
                .HasColumnType("integer").HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                 |> ignore
            b.Property<DateTime>("Date")
                .IsRequired()
                .HasColumnName("date")
                .HasColumnType("timestamp without time zone") |> ignore
            b.Property<int>("FromCurrency")
                .IsRequired()
                .HasColumnName("from_currency")
                .HasColumnType("integer") |> ignore
            b.Property<decimal>("Price")
                .IsRequired()
                .HasColumnName("price")
                .HasColumnType("numeric") |> ignore
            b.Property<Nullable<int>>("ProviderId")
                .HasColumnName("provider_id")
                .HasColumnType("integer") |> ignore
            b.Property<int>("Quantity")
                .IsRequired()
                .HasColumnName("quantity")
                .HasColumnType("integer") |> ignore
            b.Property<int>("ToCurrency")
                .IsRequired()
                .HasColumnName("to_currency")
                .HasColumnType("integer") |> ignore

            b.HasKey("Id")
                .HasName("pk_exchange_transactions") |> ignore


            b.HasIndex("ProviderId")
                .HasName("ix_exchange_transactions_provider_id") |> ignore

            b.ToTable("exchange_transactions") |> ignore

        )) |> ignore

        modelBuilder.Entity("Shared.ExchangeTransactionEvent", (fun b ->

            b.Property<int>("TransactionId")
                .HasColumnName("transaction_id")
                .HasColumnType("integer") |> ignore
            b.Property<int>("EventId")
                .HasColumnName("event_id")
                .HasColumnType("integer") |> ignore

            b.HasKey("TransactionId", "EventId")
                .HasName("pk_exchange_transaction_events") |> ignore


            b.HasIndex("EventId")
                .HasName("ix_exchange_transaction_events_event_id") |> ignore

            b.ToTable("exchange_transaction_events") |> ignore

        )) |> ignore

        modelBuilder.Entity("Shared.Provider", (fun b ->

            b.Property<int>("Id")
                .ValueGeneratedOnAdd()
                .HasColumnName("id")
                .HasColumnType("integer").HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                 |> ignore
            b.Property<string>("Name")
                .HasColumnName("name")
                .HasColumnType("text") |> ignore

            b.HasKey("Id")
                .HasName("pk_providers") |> ignore

            b.ToTable("providers") |> ignore

        )) |> ignore

        modelBuilder.Entity("Shared.ExchangeTransaction", (fun b ->
            b.HasOne("Shared.Provider","Provider")
                .WithMany()
                .HasForeignKey("ProviderId")
                .HasConstraintName("fk_exchange_transactions_providers_provider_id") |> ignore
        )) |> ignore

        modelBuilder.Entity("Shared.ExchangeTransactionEvent", (fun b ->
            b.HasOne("Shared.Event","Event")
                .WithMany()
                .HasForeignKey("EventId")
                .HasConstraintName("fk_exchange_transaction_events_events_event_id")
                .OnDelete(DeleteBehavior.Cascade)
                .IsRequired() |> ignore
            b.HasOne("Shared.ExchangeTransaction","Transaction")
                .WithMany()
                .HasForeignKey("TransactionId")
                .HasConstraintName("fk_exchange_transaction_events_exchange_transactions_transacti")
                .OnDelete(DeleteBehavior.Cascade)
                .IsRequired() |> ignore
        )) |> ignore

